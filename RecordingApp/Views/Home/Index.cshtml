@model IEnumerable<RecordingApp.Models.AudioModel>

@{
    ViewData["Title"] = "Audio Recorder";
}

<!-- Page Wrapper -->
<div style="background-color: #f4f7f9; padding: 40px; font-family: Arial, sans-serif; min-height: 100vh;">
    <h2 style="color: #4A90E2; margin-bottom: 20px;">Audio Recorder</h2>

    <!-- Recorder Controls -->
    <div style="margin-bottom: 20px;">
        <button id="recordButton" class="btn btn-success" style="margin-right: 10px;">Record</button>
        <button id="stopButton" class="btn btn-danger" disabled>Stop</button>
    </div>

    <!-- Audio Playback -->
    <audio id="audioPlayback" controls style="margin-bottom: 20px; width: 100%;"></audio>

    <!-- Form to Save Audio -->
    <form asp-controller="Audio" asp-action="SaveAudio" method="post" enctype="multipart/form-data" style="margin-bottom: 30px;">
        <input type="file" id="audioFile" name="audioFile" hidden />
        <button type="submit" class="btn btn-primary">Save Audio</button>
    </form>

    <button type="button" class="btn btn-info">Transcription</button>
    <textarea rows="3" style="width: 100%; padding: 10px; border-radius: 5px; border: 1px solid #ddd;" placeholder="Transcription will appear here..."></textarea>


    <!-- Saved Recordings Section -->
    <h3 style="color: #4A90E2; margin-bottom: 20px;">Saved Recordings</h3>
    <table id="recordingsTable" class="table table-striped">
        <thead>
            <tr>
                <th>FileName</th>
                <th>RecordedOn</th>
                <th>Audio</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var recording in Model)
                {
                    <tr>
                        <td>@recording.FileName</td>
                        <td>@recording.RecordedOn</td>
                        <td>
                            <audio controls>
                                <source src="@Url.Content(recording.FilePath)" type="audio/wav" />
                            </audio>
                        </td>
                        <td>
                            <button type="button" class="btn btn-info">Transcription</button>
                        </td>
                    </tr>
                    <!-- Transcription Text Area -->
                    <tr>
                        <td colspan="4">
                            <textarea rows="3" style="width: 100%; padding: 10px; border-radius: 5px; border: 1px solid #ddd;" placeholder="Transcription will appear here..."></textarea>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No recordings found.</td>
                </tr>
            }

        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        let mediaRecorder;
        let audioChunks = [];

        const recordButton = document.getElementById("recordButton");
        const stopButton = document.getElementById("stopButton");
        const audioPlayback = document.getElementById("audioPlayback");
        const audioFile = document.getElementById("audioFile");
        const form = document.querySelector('form'); // Select the form

        // Handle recording
        recordButton.addEventListener("click", async () => {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
                audioChunks = [];
                const audioUrl = URL.createObjectURL(audioBlob);
                audioPlayback.src = audioUrl;

                const file = new File([audioBlob], "recorded-audio.wav", { type: "audio/wav" });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                audioFile.files = dataTransfer.files;
            };

            recordButton.disabled = true;
            stopButton.disabled = false;
        });

        stopButton.addEventListener("click", () => {
            mediaRecorder.stop();
            recordButton.disabled = false;
            stopButton.disabled = true;
        });

        // Handle form submission
        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                alert(result.message); // Show success message
                updateTable(); // Update the table with the new list of recordings
            } else {
                alert(result.message); // Show error message
            }
        });

        // Update table with recordings
        async function updateTable() {
            const response = await fetch('/Audio/GetRecordings');
            const recordings = await response.json();
            const tableBody = document.querySelector('#recordingsTable tbody');
            tableBody.innerHTML = ''; // Clear existing rows

            if (recordings.length > 0) {
                recordings.forEach(recording => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                                                <td>${recording.fileName}</td>
                                                <td>${new Date(recording.recordedOn).toLocaleString()}</td>
                                                <td><audio controls><source src="${recording.filePath}" type="audio/wav" /></audio></td>
                                                <td><button type="button" class="btn btn-info">Transcription</button></td>
                                            `;
                    tableBody.appendChild(row);

                    // Add transcription text area
                    const textAreaRow = document.createElement('tr');
                    textAreaRow.innerHTML = `
                                        <td colspan="4">
                                            <textarea rows="3" style="width: 100%; padding: 10px; border-radius: 5px; border: 1px solid #ddd;" placeholder="Transcription will appear here..."></textarea>
                                        </td>
                                    `;
                    tableBody.appendChild(textAreaRow);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="4">No recordings found.</td>';
                tableBody.appendChild(row);
            }
        }

        // Initialize table content on page load
        window.addEventListener('load', updateTable);
    </script>
}